{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.12","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":70942,"databundleVersionId":10381525,"sourceType":"competition"},{"sourceId":10700324,"sourceType":"datasetVersion","datasetId":6631008}],"dockerImageVersionId":30886,"isInternetEnabled":false,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"import os\nimport pickle\nimport pandas as pd\n\n# Figure out if we are in a Kaggle notebook or not based on the current path and set file paths accordingly\nif os.getcwd() == '/kaggle/working':\n    print('Running on Kaggle')\n    data_dictionary_file='/kaggle/input/equity-post-HCT-survival-predictions/data_dictionary.csv'\n    model_file='/kaggle/input/hsct-survival-uncensored-regression/03.4-uncensored_linear_regression.pkl'\n    knn_imputer_file='/kaggle/input/hsct-survival-uncensored-regression/02-KNN_imputer.pkl'\n    one_hot_encoder_file='/kaggle/input/hsct-survival-uncensored-regression/02-one_hot_encoder.pkl'\n    testing_data_file='/kaggle/input/equity-post-HCT-survival-predictions/test.csv'\n    submission_file='submission.csv'\n\nelse:\n    data_dictionary_file='../../data/raw/data_dictionary.csv'\n    model_file='../../models/03.4-uncensored_linear_regression.pkl'\n    knn_imputer_file='../../models/02-KNN_imputer.pkl'\n    one_hot_encoder_file='../../models/02-one_hot_encoder.pkl'\n    testing_data_file='../../data/raw/test.csv'\n    submission_file='../predictions/polynomial_regression_submission.csv'\n\n\nif __name__=='__main__':\n\n    ###################################\n    # LOAD ASSETS #####################\n    ###################################\n\n    # Load the model\n    with open(model_file, 'rb') as input_file:\n        model=pickle.load(input_file)\n\n    # Load the one-hot encoder\n    with open(one_hot_encoder_file, 'rb') as input_file:\n        encoder=pickle.load(input_file)\n\n    # Load the KNN imputer\n    with open(knn_imputer_file, 'rb') as input_file:\n        imputer=pickle.load(input_file)\n\n    # Load testing data and column definitions\n    testing_data=pd.read_csv(testing_data_file)\n    data_dictionary=pd.read_csv(data_dictionary_file)\n\n    ###################################\n    # PROCESS TESTING DATA ############\n    ###################################\n\n    # Save the ID and drop\n    testing_ids=testing_data['ID']\n    testing_data.drop('ID', axis=1, inplace=True)\n    print(f'Testing features: {testing_data.shape}')\n\n    # Get lists of categorical and numerical column names\n    categorical_feature_names=data_dictionary['variable'][data_dictionary['type'] == 'Categorical']\n    numerical_feature_names=data_dictionary['variable'][data_dictionary['type'] == 'Numerical']\n\n    # Remove the feature column from the column names lists\n    categorical_feature_names=categorical_feature_names[categorical_feature_names != 'efs']\n    numerical_feature_names=numerical_feature_names[numerical_feature_names != 'efs_time']\n\n    # Split the testing dataframe\n    testing_categorical_df=testing_data[categorical_feature_names].copy()\n    testing_numerical_df=testing_data[numerical_feature_names].copy()\n\n    print(f'Testing numerical features: {testing_numerical_df.shape}')\n    print(f'Testing categorical features: {testing_categorical_df.shape}')\n\n    # Replace NAN with 'Missing' string\n    testing_categorical_df.fillna('Missing', inplace=True)\n    print(f'Testing categorical features: {testing_categorical_df.shape}')\n\n    # Fill missing data\n    testing_numerical_data=imputer.transform(testing_numerical_df)\n\n    # Re-build dataframe\n    testing_numerical_df=pd.DataFrame(testing_numerical_data, columns=testing_numerical_df.columns)\n    print(f'Testing numerical features: {testing_numerical_df.shape}')\n\n    # Encode the features\n    testing_categorical_data=encoder.transform(testing_categorical_df)\n\n    # Rebuild the dataframe\n    feature_names=encoder.get_feature_names_out()\n    testing_categorical_df=pd.DataFrame(testing_categorical_data, columns=feature_names)\n    print(f'Testing categorical features: {testing_categorical_df.shape}')\n\n    # Recombine numerical and categorical features\n    testing_features_df=pd.concat(\n        [\n            testing_numerical_df.reset_index(drop=True), \n            testing_categorical_df.reset_index(drop=True)\n        ],\n        axis=1\n    )\n\n    print(f'Testing features: {testing_features_df.shape}')\n\n    predicted_efs_time=model.predict(testing_features_df)\n    predictions_df=pd.DataFrame.from_dict({'ID': testing_ids, 'prediction': predicted_efs_time.flatten()})\n    predictions_df.describe()\n    predictions_df.to_csv(submission_file, index=False)","metadata":{"_uuid":"48e85aa4-d7bd-4c7c-a054-08e6f41b03d0","_cell_guid":"1cf55fa7-116e-4410-a65d-585d7ece3170","trusted":true,"collapsed":false,"jupyter":{"outputs_hidden":false},"execution":{"iopub.status.busy":"2025-02-09T06:07:35.275561Z","iopub.execute_input":"2025-02-09T06:07:35.275886Z","iopub.status.idle":"2025-02-09T06:07:36.561219Z","shell.execute_reply.started":"2025-02-09T06:07:35.275860Z","shell.execute_reply":"2025-02-09T06:07:36.560230Z"}},"outputs":[],"execution_count":null}]}